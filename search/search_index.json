{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This documentation will guide you through setting up your own smart mirror powered by a Raspberry Pi. A smart mirror combines a two-way mirror with a digital display, creating an interactive surface that shows personalized information while functioning as a regular mirror.</p> <p>This project aims to boost your productivity by turning a regular mirror into a morning information hub that displays calendar events, weather updates, news headlines, personal reminders, and other customizable widgets\u2014all while you complete your morning routine.</p>"},{"location":"#who-should-use-this-guide","title":"Who Should Use This Guide","text":"<p>This guide is designed specifically for first and second-term Computer Science students who possess working knowledge of:</p> <ul> <li>Terminal-based command execution and navigation</li> <li>Software installation via package managers (apt)</li> <li>Fundamental Linux/Raspberry Pi OS operations and file systems</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>To follow these instructions, you will need:</p> <ul> <li>A computer with internet access (Windows, macOS, or Linux)</li> <li>An email account</li> <li>Basic knowledge of mouse, keyboard, and trackpad terminologies</li> </ul>"},{"location":"#hardware-requirements","title":"Hardware Requirements","text":"<p>Before beginning this installation, you'll need:</p> <ul> <li>A Raspberry Pi (3B+ or newer recommended)</li> <li>An SD card</li> <li>Monitor or TV with HDMI input (for initial setup)</li> <li>USB keyboard and mouse (for initial setup)</li> <li>Internet connection (Wi-Fi or Ethernet)</li> </ul>"},{"location":"#software-requirements","title":"Software Requirements","text":"<p>Before proceeding, ensure you have the following installed:</p> <ul> <li>Raspberry Pi OS (Bullseye or newer)</li> <li>Git (for cloning repositories)</li> <li>Node.js (v14.x or later recommended)</li> <li>npm Package Manager (v7.x or later)</li> <li>Text editor for configuration (nano or vim)</li> </ul>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"<p>In these smart mirror setup instructions, I'll use the following conventions to help you navigate the documentation:</p> <ol> <li> <p>Terminal commands will be displayed in code blocks:</p> <pre><code>``` $ sudo apt install ```\n</code></pre> </li> <li> <p>File paths and configuration files will be formatted: </p> <p><code>config.js</code> or <code>/etc/MagicMirror/config</code> </p> </li> <li> <p>User interface elements will be displayed in [square brackets]:</p> <p>[Settings] or [Display]  </p> </li> <li> <p>Step-by-step instructions will be numbered and use bold for actions:</p> <ol> <li>Open the terminal</li> <li>Type the command to update your system </li> </ol> </li> <li> <p>Important changes to existing files will be highlighted:</p> Original.js<pre><code>function greet(name) {\n    const message = `Hello, ${name}!`;\n    console.log(message);\n    return message;\n}\n</code></pre> Modified.js<pre><code>function greet(name) {\n    const message = `Goodbye, ${name}!`; // (1)\n    console.log(message);\n    return message;\n}\n</code></pre> <ol> <li>Changed greeting from \"Hello\" to \"Goodbye\"</li> </ol> </li> </ol>"},{"location":"#notes-and-warning-messages","title":"Notes and Warning Messages","text":"<p>Note</p> <p>This documentation covers only the software setup aspects of the smart mirror. Hardware assembly instructions are not included.</p> <p>Warning</p> <p>Ensure your Raspberry Pi has a stable power supply of at least 2.5A. Insufficient power can cause system instability and damage your SD card.</p> <p>Info</p> <p>While this guide is designed for CS students, it assumes basic familiarity with Linux commands and package management.</p> <p>Success</p> <p>By following these instructions, you'll have a fully functional smart mirror displaying customized information while maintaining mirror functionality.</p> <p>Danger</p> <p>Unplugging your Raspberry Pi during installation may cause irreparable damage. Do not unplug your device.</p>"},{"location":"configuration/","title":"Configuration Guide","text":""},{"location":"configuration/#overview","title":"Overview","text":"<p>This section covers how to configure the basic modules of your smart mirror, set up the touch interface, and integrate voice control capabilities.</p>"},{"location":"configuration/#configuring-basic-modules","title":"Configuring Basic Modules","text":"<p>MagicMirror\u00b2 comes with several default modules. We'll configure the most useful ones for your smart mirror.</p>"},{"location":"configuration/#weather-module","title":"Weather Module","text":"<ol> <li> <p>Open the configuration file:    <pre><code>nano ~/MagicMirror/config/config.js\n</code></pre> </p> </li> <li> <p>Locate the weather module configuration section</p> </li> <li> <p>Modify the settings with your location:    <pre><code>{\n   module: \"weather\",\n   position: \"top_right\",\n   config: {\n      weatherProvider: \"openweathermap\",\n      type: \"current\",\n      location: \"New York\",\n      locationID: \"5128581\",\n      apiKey: \"YOUR_OPENWEATHERMAP_API_KEY\"\n   }\n},\n</code></pre> </p> </li> <li> <p>Get an API key by:</p> </li> <li>Going to OpenWeatherMap</li> <li>Creating a free account</li> <li>Generating an API key from your account dashboard</li> </ol> <p></p> <pre><code>!!! warning \"API Key Security\"\n    Never share your API keys publicly. They should be kept private and secure.\n</code></pre>"},{"location":"configuration/#calendar-module","title":"Calendar Module","text":"<ol> <li> <p>While still in the config file, locate the calendar module section</p> </li> <li> <p>Modify it to include your calendar:    <pre><code>{\n   module: \"calendar\",\n   header: \"Upcoming Events\",\n   position: \"top_left\",\n   config: {\n      calendars: [\n         {\n            symbol: \"calendar-check\",\n            url: \"YOUR_ICAL_URL\"\n         }\n      ]\n   }\n},\n</code></pre> </p> </li> <li> <p>Replace <code>YOUR_ICAL_URL</code> with your Google Calendar, Outlook, or other iCal URL</p> <p>Calendar Visibility</p> <p>Calendar must be made public/viewable to be used or may cause issues   </p> </li> </ol>"},{"location":"configuration/#news-feed-module","title":"News Feed Module","text":"<ol> <li> <p>Find the newsfeed module section in the config file</p> </li> <li> <p>Update it with your preferred news sources:    <pre><code>{\n   module: \"newsfeed\",\n   position: \"bottom_bar\",\n   config: {\n      feeds: [\n         {\n            title: \"CNN\",\n            url: \"http://rss.cnn.com/rss/edition.rss\"\n         },\n         {\n            title: \"BBC\",\n            url: \"https://feeds.bbci.co.uk/news/world/rss.xml\"\n         }\n      ],\n      showSourceTitle: true,\n      showPublishDate: true,\n      broadcastNewsFeeds: true,\n      broadcastNewsUpdates: true\n   }\n}\n</code></pre> </p> </li> <li> <p>Save the file by pressing <code>Ctrl+O</code>, then <code>Enter</code></p> </li> <li> <p>Exit the editor by pressing <code>Ctrl+X</code></p> </li> </ol> <p>BONUS Configurations</p> <p>The additional configurations below, while not essential for basic functionality, offer a delightful enhancement to the user experience.</p>"},{"location":"configuration/#bonus-setting-up-touch-interface","title":"BONUS: Setting Up Touch Interface","text":"<p>To enable touch functionality on your mirror:</p>"},{"location":"configuration/#installing-the-touch-module","title":"Installing the Touch Module","text":"<ol> <li> <p>Navigate to the modules directory:    <pre><code>cd ~/MagicMirror/modules\n</code></pre></p> </li> <li> <p>Clone the MMM-Touch module:    <pre><code>git clone https://github.com/sheyabernstein/MMM-Touch.git\n</code></pre></p> </li> <li> <p>Install the module dependencies:    <pre><code>cd MMM-Touch\nnpm install\n</code></pre></p> </li> <li> <p>Return to the MagicMirror directory:    <pre><code>cd ~/MagicMirror\n</code></pre></p> </li> <li> <p>Edit the configuration file to add the touch module:    <pre><code>nano config/config.js\n</code></pre></p> </li> <li> <p>Add the following to your <code>modules</code> array:    <pre><code>{\n   module: \"MMM-Touch\",\n   position: \"bottom_center\",\n   config: {\n      debug: false,\n      gestures: {\n         swipeRight: {\n            notification: \"SHOW_ALERT\",\n            payload: {\n               title: \"Swiped Right\",\n               message: \"You swiped right!\",\n               timer: 2000\n            }\n         },\n         swipeLeft: {\n            notification: \"SHOW_ALERT\",\n            payload: {\n               title: \"Swiped Left\",\n               message: \"You swiped left!\",\n               timer: 2000\n            }\n         }\n      }\n   }\n},\n</code></pre></p> </li> <li> <p>Save and exit the editor</p> </li> </ol>"},{"location":"configuration/#calibrating-the-touch-screen","title":"Calibrating the Touch Screen","text":"<p>If your touch screen requires calibration:</p> <ol> <li> <p>Install the calibration tool:    <pre><code>sudo apt install -y xinput-calibrator\n</code></pre></p> </li> <li> <p>Run the calibration tool:    <pre><code>DISPLAY=:0 xinput_calibrator\n</code></pre></p> </li> <li> <p>Follow the on-screen instructions to touch the targets</p> </li> <li> <p>Copy the calibration data displayed after completion</p> </li> <li> <p>Create a calibration configuration file:    <pre><code>sudo nano /etc/X11/xorg.conf.d/99-calibration.conf\n</code></pre></p> </li> <li> <p>Paste the calibration data into this file</p> </li> <li> <p>Save and exit</p> </li> <li> <p>Restart your Raspberry Pi:    <pre><code>sudo reboot\n</code></pre></p> </li> </ol>"},{"location":"configuration/#bonus-setting-up-voice-control-with-alexa","title":"BONUS: Setting Up Voice Control with Alexa","text":"<p>To integrate Alexa voice capabilities with your smart mirror:</p>"},{"location":"configuration/#installing-required-dependencies","title":"Installing Required Dependencies","text":"<ol> <li> <p>Install required packages:    <pre><code>sudo apt install -y python3-pyaudio libatlas-base-dev portaudio19-dev\n</code></pre></p> </li> <li> <p>Clone the Alexa module:    <pre><code>cd ~/MagicMirror/modules\ngit clone https://github.com/dolanmiu/MMM-awesome-alexa.git\n</code></pre></p> </li> <li> <p>Install module dependencies:    <pre><code>cd MMM-awesome-alexa\nnpm install\n</code></pre></p> </li> </ol>"},{"location":"configuration/#register-with-amazon-developer","title":"Register with Amazon Developer","text":"<ol> <li>Create an Amazon developer account at developer.amazon.com</li> <li>Register a new Alexa device in the developer console</li> <li>Note your Amazon Client ID, Secret, and Device ID</li> </ol>"},{"location":"configuration/#configure-the-alexa-module","title":"Configure the Alexa Module","text":"<ol> <li> <p>Edit the MagicMirror configuration:    <pre><code>nano ~/MagicMirror/config/config.js\n</code></pre></p> </li> <li> <p>Add the Alexa module to your modules array:    <pre><code>{\n   module: \"MMM-awesome-alexa\",\n   position: \"bottom_bar\",\n   config: {\n      wakeWord: \"Alexa\",\n      clientId: \"YOUR_AMAZON_CLIENT_ID\",\n      clientSecret: \"YOUR_AMAZON_CLIENT_SECRET\",\n      deviceId: \"YOUR_AMAZON_DEVICE_ID\"\n   }\n},\n</code></pre></p> </li> <li> <p>Replace the placeholder values with your actual Amazon credentials</p> </li> <li> <p>Save and exit the editor</p> </li> <li> <p>Start the authentication process:    <pre><code>cd ~/MagicMirror/modules/MMM-awesome-alexa\nnpm run authenticate\n</code></pre></p> </li> <li> <p>Follow the on-screen instructions to complete authentication</p> </li> </ol>"},{"location":"configuration/#conclusion","title":"Conclusion","text":"<p>You have now configured the basic modules, enabled touch interface, and set up voice control for your smart mirror. In the next section, we'll cover customizing the layout and adding additional modules to enhance functionality.</p>"},{"location":"customization/","title":"Customization Guide","text":""},{"location":"customization/#overview","title":"Overview","text":"<p>This section will guide you through customizing the layout of your smart mirror, adding additional modules, and creating your own custom modules to further enhance your smart mirror experience.</p>"},{"location":"customization/#customizing-the-layout","title":"Customizing the Layout","text":"<p>The MagicMirror\u00b2 layout is defined in the configuration file and can be easily modified.</p>"},{"location":"customization/#understanding-position-values","title":"Understanding Position Values","text":"<p>The default positions available in MagicMirror\u00b2 are:</p> <ul> <li><code>top_bar</code>: Spans the entire top of the mirror</li> <li><code>top_left</code>: Top left corner</li> <li><code>top_center</code>: Top center</li> <li><code>top_right</code>: Top right corner</li> <li><code>upper_third</code>: Upper third of the mirror, spanning the entire width</li> <li><code>middle_center</code>: Center of the mirror</li> <li><code>lower_third</code>: Lower third of the mirror, spanning the entire width</li> <li><code>bottom_left</code>: Bottom left corner</li> <li><code>bottom_center</code>: Bottom center</li> <li><code>bottom_right</code>: Bottom right corner</li> <li><code>bottom_bar</code>: Spans the entire bottom of the mirror</li> <li><code>fullscreen_above</code>: Fullscreen, above all other modules</li> <li><code>fullscreen_below</code>: Fullscreen, below all other modules</li> </ul>"},{"location":"customization/#modifying-module-positions","title":"Modifying Module Positions","text":"<ol> <li> <p>Open the configuration file:    <pre><code>nano ~/MagicMirror/config/config.js\n</code></pre></p> </li> <li> <p>Locate the <code>modules</code> array</p> </li> <li> <p>Change the <code>position</code> property of any module to adjust its placement:    <pre><code>{\n   module: \"clock\",\n   position: \"top_center\", // Change this to any position value\n   config: {\n      // Module configurations\n   }\n},\n</code></pre></p> </li> <li> <p>Save your changes and exit the editor</p> </li> </ol>"},{"location":"customization/#creating-custom-layouts","title":"Creating Custom Layouts","text":"<p>You can create a custom layout by modifying the regions in the MagicMirror\u00b2 CSS:</p> <ol> <li> <p>Create a custom CSS file:    <pre><code>nano ~/MagicMirror/css/custom.css\n</code></pre></p> </li> <li> <p>Add custom positioning rules:    <pre><code>.region.custom_top {\n   top: 0;\n   left: 25%;\n   right: 25%;\n   height: 100px;\n}\n\n.region.custom_middle {\n   top: 50%;\n   left: 10%;\n   right: 10%;\n   transform: translateY(-50%);\n}\n</code></pre></p> </li> <li> <p>Save the file and exit</p> </li> <li> <p>Link the custom CSS in your HTML by editing:    <pre><code>nano ~/MagicMirror/index.html\n</code></pre></p> </li> <li> <p>Add this line in the <code>&lt;head&gt;</code> section:    <pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/custom.css\"&gt;\n</code></pre></p> </li> <li> <p>Save and exit</p> </li> <li> <p>Use your custom positions in your config file by changing module positions to match your custom class names (e.g., <code>\"custom_top\"</code>, <code>\"custom_middle\"</code>)</p> </li> </ol>"},{"location":"customization/#adding-additional-modules","title":"Adding Additional Modules","text":"<p>MagicMirror\u00b2 has a thriving community with hundreds of additional modules available.</p>"},{"location":"customization/#finding-modules","title":"Finding Modules","text":"<ol> <li>Browse the MagicMirror Module Wiki</li> <li>Search for modules that match your needs</li> </ol>"},{"location":"customization/#installing-a-spotify-module","title":"Installing a Spotify Module","text":"<ol> <li> <p>Clone the module repository:    <pre><code>cd ~/MagicMirror/modules\ngit clone https://github.com/skuethe/MMM-Spotify.git\n</code></pre></p> </li> <li> <p>Install module dependencies:    <pre><code>cd MMM-Spotify\nnpm install\n</code></pre></p> </li> <li> <p>Register a Spotify Developer application at developer.spotify.com</p> </li> <li> <p>Note your Client ID and Client Secret</p> </li> <li> <p>Configure the module in your config file:    <pre><code>nano ~/MagicMirror/config/config.js\n</code></pre></p> </li> <li> <p>Add the module configuration:    <pre><code>{\n   module: \"MMM-Spotify\",\n   position: \"bottom_left\",\n   config: {\n      clientID: \"YOUR_SPOTIFY_CLIENT_ID\",\n      clientSecret: \"YOUR_SPOTIFY_CLIENT_SECRET\",\n      showCoverArt: true\n   }\n},\n</code></pre></p> </li> <li> <p>Save and exit</p> </li> <li> <p>Authenticate with Spotify by following the module's instructions</p> </li> </ol>"},{"location":"customization/#installing-a-compliment-module","title":"Installing a Compliment Module","text":"<ol> <li> <p>Clone the module:    <pre><code>cd ~/MagicMirror/modules\ngit clone https://github.com/timdows/MMM-DailyBibleVerse.git\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>cd MMM-DailyBibleVerse\nnpm install\n</code></pre></p> </li> <li> <p>Add the module to your config:    <pre><code>{\n   module: \"MMM-DailyBibleVerse\",\n   position: \"lower_third\",\n   config: {\n      version: \"NIV\"\n   }\n},\n</code></pre></p> </li> </ol>"},{"location":"customization/#creating-your-own-custom-module","title":"Creating Your Own Custom Module","text":"<p>You can create your own module to add functionality specific to your needs.</p>"},{"location":"customization/#creating-the-module-structure","title":"Creating the Module Structure","text":"<ol> <li> <p>Create a new module directory:    <pre><code>cd ~/MagicMirror/modules\nmkdir -p MMM-MyCustomModule\ncd MMM-MyCustomModule\n</code></pre></p> </li> <li> <p>Create the main module file:    <pre><code>nano MMM-MyCustomModule.js\n</code></pre></p> </li> <li> <p>Add the basic module code:    <pre><code>Module.register(\"MMM-MyCustomModule\", {\n   // Default module configuration\n   defaults: {\n      text: \"Hello World!\",\n      updateInterval: 60000  // milliseconds\n   },\n\n   // Override start method\n   start: function() {\n      Log.info(\"Starting module: \" + this.name);\n      this.loaded = false;\n      this.scheduleUpdate();\n   },\n\n   // Override getDom method\n   getDom: function() {\n      var wrapper = document.createElement(\"div\");\n\n      if (!this.loaded) {\n         wrapper.innerHTML = \"Loading...\";\n         return wrapper;\n      }\n\n      var header = document.createElement(\"header\");\n      header.innerHTML = \"My Custom Module\";\n      wrapper.appendChild(header);\n\n      var content = document.createElement(\"div\");\n      content.className = \"module-content\";\n      content.innerHTML = this.config.text;\n      wrapper.appendChild(content);\n\n      return wrapper;\n   },\n\n   // Schedule next update\n   scheduleUpdate: function() {\n      var self = this;\n      setInterval(function() {\n         self.updateDom();\n      }, this.config.updateInterval);\n   }\n});\n</code></pre></p> </li> <li> <p>Save and exit</p> </li> <li> <p>Create a styles file:    <pre><code>nano MMM-MyCustomModule.css\n</code></pre></p> </li> <li> <p>Add some basic styles:    <pre><code>.MMM-MyCustomModule .module-content {\n   font-size: 20px;\n   color: white;\n   padding: 10px;\n}\n</code></pre></p> </li> <li> <p>Save and exit</p> </li> <li> <p>Add your module to your config:    <pre><code>{\n   module: \"MMM-MyCustomModule\",\n   position: \"middle_center\",\n   config: {\n      text: \"This is my first custom module!\",\n      updateInterval: 30000\n   }\n},\n</code></pre></p> </li> </ol>"},{"location":"customization/#making-your-module-interactive","title":"Making Your Module Interactive","text":"<p>To add interactivity to your module:</p> <ol> <li> <p>Update your module file:    <pre><code>nano MMM-MyCustomModule.js\n</code></pre></p> </li> <li> <p>Add notification handling:    <pre><code>// Add this to your module definition\nnotificationReceived: function(notification, payload, sender) {\n   if (notification === \"CUSTOM_ACTION\") {\n      // Handle the notification\n      this.config.text = \"Action received: \" + payload;\n      this.updateDom();\n   }\n},\n\n// Add a method to send notifications\nsendNotification: function(message) {\n   this.sendSocketNotification(\"SEND_MESSAGE\", message);\n}\n</code></pre></p> </li> <li> <p>Create a node helper for background tasks:    <pre><code>nano node_helper.js\n</code></pre></p> </li> <li> <p>Add the node helper code:    <pre><code>var NodeHelper = require(\"node_helper\");\n\nmodule.exports = NodeHelper.create({\n   socketNotificationReceived: function(notification, payload) {\n      if (notification === \"SEND_MESSAGE\") {\n         console.log(\"Received message: \", payload);\n         // Process the message and send result back\n         this.sendSocketNotification(\"MESSAGE_RESULT\", \n         \"Processed: \" + payload);\n      }\n   }\n});\n</code></pre></p> </li> <li> <p>Save and exit</p> </li> </ol>"},{"location":"customization/#conclusion","title":"Conclusion","text":"<p>You have now learned how to customize the layout of your smart mirror, add additional modules from the community, and create your own custom modules. With these skills, you can tailor your smart mirror to display exactly the information you want in the way you want it.</p>"},{"location":"glossary/","title":"Glossary","text":"Term Definition API Key A unique identifier used to authenticate and authorize access to a web service or application. AutoStart A feature that allows applications to start automatically when the system boots up. Calibration The process of adjusting a touch screen to ensure accuracy in detecting touch input. CSS (Cascading Style Sheets) A style sheet language used for describing the presentation of a document written in HTML. Dependency A software package or module required by another package to function properly. Git A distributed version control system for tracking changes in source code during software development. GPIO (General Purpose Input/Output) Pins on the Raspberry Pi that can be programmed to interact with the physical world. iCal URL A URL that points to a calendar file in the iCalendar format, used for sharing calendar data. MagicMirror\u00b2 An open source modular smart mirror platform designed for Raspberry Pi. Module A component that provides specific functionality to the MagicMirror\u00b2 platform. Node.js A JavaScript runtime environment that executes JavaScript code outside a web browser. NVM (Node Version Manager) A version manager to download versions of node.js easily. npm (Node Package Manager) A package manager for JavaScript, used to install Node.js packages. Raspberry Pi A series of small single-board computers developed in the United Kingdom by the Raspberry Pi Foundation. Repository A storage location for software packages, typically managed by a version control system like Git. SSH (Secure Shell) A cryptographic network protocol for operating network services securely over an unsecured network. Two-way Mirror A mirror that is reflective on one side but transparent on the other, allowing a display behind it to be visible. Voice Control The ability to control a device using spoken commands processed by voice recognition technology. Widget A small application with limited functionality that can be installed and executed within a larger application. XAMPP A free and open-source cross-platform web server solution stack package consisting mainly of the Apache HTTP Server, MariaDB database, and interpreters for scripts written in the PHP and Perl programming languages."},{"location":"installation/","title":"Installation Guide","text":"<p>Loss of Progress</p> <p>An interrupt of power could cause the corruption of your SD card resulting a loss of progress. </p>"},{"location":"installation/#overview","title":"Overview","text":"<p>This section guides you through installing the MagicMirror\u00b2 software on your Raspberry Pi. MagicMirror\u00b2 is an open-source platform that transforms your mirror into a customizable display with various modules for different types of information.</p>"},{"location":"installation/#preparing-your-raspberry-pi","title":"Preparing Your Raspberry Pi","text":""},{"location":"installation/#update-your-system","title":"Update Your System","text":"<p>Before installing any new software, ensure your system is up to date:</p> <ol> <li>Open a terminal window</li> <li>Run the following commands:     <pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre></li> <li> <p>Wait for the process to complete (may take several minutes)</p> <p>System Updates</p> <p>Keeping your system updated ensures compatibility with the latest software and improves security.</p> </li> </ol>"},{"location":"installation/#install-required-dependencies","title":"Install Required Dependencies","text":"<p>MagicMirror\u00b2 requires several dependencies to function properly:</p> <ol> <li> <p>Install Node Version Manager through the terminal window: (NVM)    <pre><code>sudo apt install -y curl build-essential libssl-dev\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n</code></pre></p> </li> <li> <p>Reload Reload your profile to start using Node Version Manager: (NVM)    <pre><code>export NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\"\n</code></pre></p> <p> 3. Install Install Node.js v20     <pre><code>nvm install node\n</code></pre></p> </li> <li> <p>Verify the installation:    <pre><code>node -v\nnpm -v\n</code></pre></p> <p></p> <p>Version Specification</p> <p>Version may need to be specified.</p> </li> <li> <p>Install other required packages:    <pre><code>sudo apt install -y git python3-pip\n</code></pre></p> </li> </ol>"},{"location":"installation/#installing-magicmirror2","title":"Installing MagicMirror\u00b2","text":""},{"location":"installation/#clone-the-repository","title":"Clone the Repository","text":"<ol> <li> <p>Navigate to your home directory:    <pre><code>cd ~\n</code></pre></p> </li> <li> <p>Clone the MagicMirror repository:    <pre><code>git clone https://github.com/MichMich/MagicMirror.git\n</code></pre> </p> </li> <li> <p>Navigate to the MagicMirror directory:    <pre><code>cd MagicMirror\n</code></pre></p> </li> </ol>"},{"location":"installation/#install-dependencies-and-run-setup","title":"Install Dependencies and Run Setup","text":"<ol> <li> <p>Install the required npm packages:    <pre><code>npm install\n</code></pre></p> <p></p> <p>Installation Time</p> <p>This process may take 10-15 minutes on a Raspberry Pi. Be patient and don't interrupt the process.</p> </li> <li> <p>Copy the sample configuration:    <pre><code>cp config/config.js.sample config/config.js\n</code></pre></p> </li> <li> <p>Test the installation:    <pre><code>npm start\n</code></pre> If successful, you should see the MagicMirror interface appear on screen.</p> <ul> <li>Press <code>Ctrl+Q</code> to exit the application</li> </ul> </li> </ol> <p></p> <p>Completion of installing MagicMirror\u00b2</p> <p>You've done it! Congratulations!</p>"},{"location":"installation/#conclusion","title":"Conclusion","text":"<p>You have now successfully installed MagicMirror\u00b2 on your Raspberry Pi and configured it to start automatically at boot. In the next section, we'll configure the basic modules and customize the display layout.</p>"},{"location":"raspberry_pi_setup/","title":"Raspberry Pi OS Setup","text":""},{"location":"raspberry_pi_setup/#overview","title":"Overview","text":"<p>This section guides you through installing and configuring Raspberry Pi OS on your SD card, which serves as the foundation for your smart mirror software. Raspberry Pi OS (formerly called Raspbian) is the official operating system for Raspberry Pi devices and provides the Linux environment needed to run the MagicMirror\u00b2 software.</p>"},{"location":"raspberry_pi_setup/#preparing-the-sd-card","title":"Preparing the SD Card","text":""},{"location":"raspberry_pi_setup/#download-and-install-raspberry-pi-imager","title":"Download and Install Raspberry Pi Imager","text":"<ol> <li> <p>Open your web browser and go to the Raspberry Pi website</p> </li> <li> <p>Download the Raspberry Pi Imager software for your operating system (Windows, macOS, or Linux)</p> </li> <li> <p>Install the downloaded software by following the installation prompts</p> <p>Note</p> <p>Raspberry Pi Imager is the official tool for installing Raspberry Pi OS and is regularly updated with the latest versions.</p> <p></p> </li> </ol>"},{"location":"raspberry_pi_setup/#flash-raspberry-pi-os-to-the-sd-card","title":"Flash Raspberry Pi OS to the SD Card","text":"<ol> <li> <p>Insert your microSD card into your computer using an adapter if necessary</p> </li> <li> <p>Launch Raspberry Pi Imager</p> </li> <li> <p>Click [CHOOSE DEVICE] and select your Raspberry Pi model from the list</p> </li> <li> <p>Click [CHOOSE OS] and select \"Raspberry Pi OS (64-bit)\" from the list of operating systems</p> <p>Note</p> <p>Using the 64-bit version is recommended for Raspberry Pi 3 or newer, as it allows better performance for the smart mirror software.</p> </li> <li> <p>Click [CHOOSE STORAGE] and select your SD card from the list</p> <p>Data Loss Risk</p> <p>All data on the selected SD card will be erased during this process. Make sure you have selected the correct storage device.</p> <p></p> </li> </ol> <p>Customization Settings</p> <p>If you don\u2019t configure your Raspberry Pi via OS customization settings, Raspberry Pi OS will ask you for the same information at first boot during the configuration wizard. You can click the No button to skip OS customisation</p> <ol> <li> <p>Configure the following settings:</p> <ul> <li>Check \"Set hostname\" and enter a name (e.g., \"smartmirror\")</li> <li>Check \"Enable SSH\" and select \"Use password authentication\"</li> <li>Check \"Set username and password\" and create a username and secure password</li> <li>Check \"Configure wireless LAN\" if you plan to use Wi-Fi</li> <li>Enter your Wi-Fi network name (SSID) and password</li> <li>Select your country from the dropdown menu</li> <li>Check \"Set locale settings\" and select your time zone and keyboard layout</li> </ul> <p></p> </li> <li> <p>Click [SAVE] to save your advanced options</p> </li> <li> <p>Click [WRITE] to begin the OS installation process</p> </li> <li> <p>Confirm by clicking [YES] when prompted</p> </li> <li> <p>Wait for the writing and verification process to complete (this may take several minutes)</p> </li> <li> <p>Click [CONTINUE] when prompted that the write was successful</p> <p></p> <p></p> <p></p> <p></p> </li> <li> <p>Remove the SD card from your computer</p> <p>Success</p> <p>The Raspberry Pi software has been successfully written to the SD card, and we can now move forward!</p> </li> </ol>"},{"location":"raspberry_pi_setup/#initial-boot-and-configuration","title":"Initial Boot and Configuration","text":""},{"location":"raspberry_pi_setup/#connect-your-raspberry-pi","title":"Connect Your Raspberry Pi","text":"<ol> <li> <p>Insert the prepared microSD card into your Raspberry Pi</p> </li> <li> <p>Connect the following to your Raspberry Pi:</p> <ul> <li>Display (via HDMI)</li> <li>Keyboard and mouse (via USB)</li> <li>Power supply</li> </ul> </li> <li> <p>Power on your Raspberry Pi by connecting the power supply</p> <p>Note</p> <p>If you configured SSH and Wi-Fi in the previous steps, you can technically skip the physical keyboard, mouse, and display connections and access your Raspberry Pi remotely. However, for initial setup, a direct connection is recommended.</p> <p></p> </li> </ol>"},{"location":"raspberry_pi_setup/#first-boot-setup","title":"First Boot Setup","text":"<p>The Raspberry Pi will automatically boot and perform initial setup based on the configurations you set in the Raspberry Pi Imager:</p> <ol> <li> <p>Wait for the Raspberry Pi to complete its first boot process (may take a few minutes)</p> </li> <li> <p>Verify your connection to Wi-Fi (if configured) by checking the Wi-Fi icon in the top-right corner of the screen</p> </li> <li> <p>Open Terminal by clicking on the terminal icon in the taskbar or pressing <code>Ctrl+Alt+T</code></p> </li> <li> <p>Update your system by running the following commands:    <pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre></p> </li> <li> <p>Wait for the update process to complete (this may take 10-15 minutes depending on your internet speed)</p> <p></p> </li> </ol>"},{"location":"raspberry_pi_setup/#optimizing-your-raspberry-pi-for-smart-mirror-use","title":"Optimizing Your Raspberry Pi for Smart Mirror Use","text":""},{"location":"raspberry_pi_setup/#configure-display-settings","title":"Configure Display Settings","text":"<ol> <li> <p>Open Raspberry Pi Configuration by clicking the Raspberry Pi menu icon (top-left) &gt; Preferences &gt; Raspberry Pi Configuration</p> </li> <li> <p>Click on the [Display] tab</p> </li> <li> <p>Check \"Disable screen blanking\" to prevent the display from turning off</p> </li> <li> <p>Click [OK] to save changes</p> <p></p> </li> </ol>"},{"location":"raspberry_pi_setup/#configure-boot-options","title":"Configure Boot Options","text":"<ol> <li> <p>Open Terminal if not already open</p> </li> <li> <p>Enter the following command to edit the boot configuration:    <pre><code>sudo raspi-config\n</code></pre></p> <p></p> </li> <li> <p>Select \"System Options\" using arrow keys and press Enter</p> </li> <li> <p>Select \"Boot / Auto Login\" and press Enter</p> </li> <li> <p>Select \"Desktop Autologin\" to make the Raspberry Pi automatically log in on startup</p> </li> <li> <p>Navigate to \"Finish\" and press Enter to save changes</p> </li> <li> <p>Reboot when prompted</p> <p></p> </li> </ol>"},{"location":"raspberry_pi_setup/#configure-power-management","title":"Configure Power Management","text":"<p>To optimize performance for the smart mirror:</p> <ol> <li> <p>Open Terminal</p> </li> <li> <p>Edit the config.txt file:    <pre><code>sudo nano /boot/config.txt\n</code></pre></p> <p>Pi5 command</p> <p>You may need to use /boot/firmware/config.txt as the path if using a Raspberry Pi 5.</p> </li> <li> <p>Add the following lines at the end of the file to allocate more memory to the GPU for better display performance:    <pre><code># Optimize for display\ngpu_mem=128\n</code></pre></p> </li> <li> <p>Save the file by pressing <code>Ctrl+O</code>, then Enter</p> </li> <li> <p>Exit nano by pressing <code>Ctrl+X</code></p> </li> <li> <p>Reboot your Raspberry Pi:    <pre><code>sudo reboot\n</code></pre></p> <p></p> </li> </ol>"},{"location":"raspberry_pi_setup/#enable-remote-access-optional","title":"Enable Remote Access (Optional)","text":"<p>If you didn't enable SSH during the initial setup with Raspberry Pi Imager, you can do it now:</p> <ol> <li> <p>Open Terminal</p> </li> <li> <p>Run the following command:    <pre><code>sudo raspi-config\n</code></pre></p> </li> <li> <p>Select \"Interface Options\" and press Enter</p> </li> <li> <p>Select \"SSH\" and press Enter</p> </li> <li> <p>Select \"Yes\" to enable SSH</p> </li> <li> <p>Navigate to \"Finish\" and press Enter</p> </li> <li> <p>Reboot when prompted</p> <p></p> </li> </ol>"},{"location":"raspberry_pi_setup/#finding-your-raspberry-pis-ip-address","title":"Finding Your Raspberry Pi's IP Address","text":"<p>To connect to your Raspberry Pi remotely or for the next steps in the smart mirror setup:</p> <ol> <li> <p>Open Terminal</p> </li> <li> <p>Run the following command:    <pre><code>hostname -I\n</code></pre></p> </li> <li> <p>Note the IP address displayed (e.g., 192.168.1.100)</p> <p></p> </li> </ol>"},{"location":"raspberry_pi_setup/#conclusion","title":"Conclusion","text":"<p>You have now successfully:</p> <ul> <li>Downloaded and installed Raspberry Pi OS on your SD card</li> <li>Completed the initial boot and configuration</li> <li>Updated your system with the latest software</li> <li>Optimized display and boot settings for smart mirror use</li> <li>Enabled remote access (if desired)</li> <li>Located your Raspberry Pi's IP address for future reference</li> </ul> <p>Your Raspberry Pi is now prepared for the next step: installing the required packages for your smart mirror. In the next section, we'll guide you through installing Node.js, Git, and other dependencies needed for the MagicMirror\u00b2 software.</p> <p> </p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":""},{"location":"troubleshooting/#screen-not-turning-onoff-automatically","title":"Screen Not Turning On/Off Automatically","text":"<p>Problem: The mirror display doesn't turn on or off at the expected times.</p> <p>Solution:</p> <ol> <li> <p>Check that the automatic screen management module is correctly configured:    <pre><code>nano ~/MagicMirror/config/config.js\n</code></pre></p> </li> <li> <p>Ensure the MMM-ScreenManager module is included and properly configured:    <pre><code>{\n   module: \"MMM-ScreenManager\",\n   position: \"bottom_bar\",\n   config: {\n      turnOnHour: 7,     // Turn on at 7 AM\n      turnOffHour: 23,   // Turn off at 11 PM\n   }\n},\n</code></pre></p> </li> <li> <p>If using PIR motion sensor for screen management, verify connections and test the sensor independently:    <pre><code>gpio -g read 17  // Assuming PIR connected to GPIO 17\n</code></pre></p> </li> <li> <p>Restart MagicMirror:    <pre><code>pm2 restart MagicMirror\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#modules-not-loading-properly","title":"Modules Not Loading Properly","text":"<p>Problem: Some modules display error messages or fail to load.</p> <p>Solution:</p> <ol> <li> <p>Check the MagicMirror logs for errors:    <pre><code>pm2 logs MagicMirror\n</code></pre></p> </li> <li> <p>Verify module dependencies are installed:    <pre><code>cd ~/MagicMirror/modules/[module-name]\nnpm install\n</code></pre></p> </li> <li> <p>Check the module's GitHub page for known issues or required configurations</p> </li> <li> <p>Update the module to the latest version:    <pre><code>cd ~/MagicMirror/modules/[module-name]\ngit pull\nnpm install\n</code></pre></p> </li> <li> <p>If a module continues to cause problems, try disabling it temporarily by commenting it out in the config file:    <pre><code>// {\n//  module: \"problematic-module\",\n//  position: \"top_right\",\n//  config: { /* ... */ }\n// },\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#touch-interface-not-responding","title":"Touch Interface Not Responding","text":"<p>Problem: The touch screen doesn't register touches or responds incorrectly.</p> <p>Solution:</p> <ol> <li> <p>Verify that the touch drivers are installed:    <pre><code>sudo apt install -y xserver-xorg-input-evdev\n</code></pre></p> </li> <li> <p>Recalibrate the touch screen:    <pre><code>DISPLAY=:0 xinput_calibrator\n</code></pre></p> </li> <li> <p>Check if the touch interface is detected:    <pre><code>xinput list\n</code></pre></p> </li> <li> <p>If using a USB touch overlay, ensure it's properly connected and powered</p> </li> <li> <p>Restart the X server:    <pre><code>sudo systemctl restart lightdm\n</code></pre></p> </li> <li> <p>If problems persist, try setting up the touch interface from scratch following the guide in the Configuration section</p> </li> </ol>"},{"location":"troubleshooting/#voice-commands-not-being-recognized","title":"Voice Commands Not Being Recognized","text":"<p>Problem: Alexa voice commands aren't recognized or don't trigger actions.</p> <p>Solution:</p> <ol> <li> <p>Check that your microphone is working:    <pre><code>arecord -l\n</code></pre></p> </li> <li> <p>Test audio recording:    <pre><code>arecord -d 5 test.wav\naplay test.wav\n</code></pre></p> </li> <li> <p>Verify the MMM-awesome-alexa module configuration:    <pre><code>nano ~/MagicMirror/config/config.js\n</code></pre></p> </li> <li> <p>Check that the wake word detection is properly set:    <pre><code>{    \n   module: \"MMM-awesome-alexa\",    \n   config: {    \n      wakeWord: \"Alexa\",\n   }\n},\n</code></pre></p> </li> <li> <p>Re-run the authentication process:    <pre><code>cd ~/MagicMirror/modules/MMM-awesome-alexa\nnpm run authenticate\n</code></pre></p> </li> <li> <p>Consider adjusting the microphone sensitivity or using a USB microphone with better quality</p> </li> </ol>"},{"location":"troubleshooting/#wi-fi-connectivity-issues","title":"Wi-Fi Connectivity Issues","text":"<p>Problem: The smart mirror loses internet connection or can't connect to Wi-Fi.</p> <p>Solution:</p> <ol> <li> <p>Check your Wi-Fi connection status:    <pre><code>iwconfig\n</code></pre></p> </li> <li> <p>Verify that the network is available:    <pre><code>sudo iwlist wlan0 scan | grep ESSID\n</code></pre></p> </li> <li> <p>Check your network configuration:    <pre><code>nano /etc/wpa_supplicant/wpa_supplicant.conf\n</code></pre></p> </li> <li> <p>Ensure your Wi-Fi credentials are correct:    <pre><code>network={\n   ssid=\"YourNetworkName\"\n   psk=\"YourPassword\"\n}\n</code></pre></p> </li> <li> <p>Restart the networking service:    <pre><code>sudo systemctl restart networking\n</code></pre></p> </li> <li> <p>If problems persist, consider using a Wi-Fi repeater or a USB Wi-Fi adapter with better range</p> </li> </ol>"},{"location":"troubleshooting/#magicmirror-crashes-or-freezes","title":"MagicMirror Crashes or Freezes","text":"<p>Problem: The MagicMirror application crashes, freezes, or shows a blank screen.</p> <p>Solution:</p> <ol> <li> <p>Check system resources:    <pre><code>top\n</code></pre></p> </li> <li> <p>Verify that you have enough free memory:    <pre><code>free -h\n</code></pre></p> </li> <li> <p>Check the SD card for corruption:    <pre><code>sudo fsck -y /dev/mmcblk0p2\n</code></pre></p> </li> <li> <p>Disable some modules to reduce resource usage by commenting them out in the config file</p> </li> <li> <p>Consider using PM2 to manage MagicMirror:    <pre><code>npm install -g pm2\npm2 start ~/MagicMirror/installers/pm2_MagicMirror.json\n</code></pre></p> </li> <li> <p>Set up automatic recovery:    <pre><code>pm2 startup\npm2 save\n</code></pre></p> </li> </ol>"},{"location":"troubleshootingDG/","title":"Troubleshooting","text":"Symptoms Probable Cause Action Unable to load the screen at the expected times The mirror display doesn't turn on or off when scheduled Double check what port you have set in <code>~/MagicMirror/config/config.js</code> and ensure the MMM-ScreenManager module is properly configured with correct hours: <code>turnOnHour: 7, turnOffHour: 23</code>. If using PIR motion sensor, verify connections with <code>gpio -g read 17</code>. Then restart MagicMirror with <code>pm2 restart MagicMirror</code> Modules displaying error messages or failing to load Some modules have missing dependencies or configuration issues Check MagicMirror logs with <code>pm2 logs MagicMirror</code>. Verify module dependencies with <code>cd ~/MagicMirror/modules/[module-name]</code> and <code>npm install</code>. Check GitHub for known issues. Update modules with <code>git pull</code> and <code>npm install</code>. Disable problematic modules by commenting them out in the config file. Touch screen doesn't register touches or responds incorrectly Touch interface drivers may be missing or misconfigured Verify touch drivers with <code>sudo apt install -y xserver-xorg-input-evdev</code>. Recalibrate with <code>DISPLAY=:0 xinput_calibrator</code>. Check detection with <code>xinput list</code>. Ensure USB connections are secure. Restart X server: <code>sudo systemctl restart lightdm</code> Voice commands not being recognized Microphone issues or Alexa module configuration problems Check microphone with <code>arecord -l</code>. Test recording: <code>arecord -d 5 test.wav</code> and <code>aplay test.wav</code>. Verify module config in <code>~/MagicMirror/config/config.js</code>. Ensure wake word is set to \"Alexa\". Re-run authentication: <code>cd ~/MagicMirror/modules/MMM-awesome-alexa</code> and <code>npm run authenticate</code> Smart mirror loses internet connection Wi-Fi connectivity issues Check connection status with <code>iwconfig</code>. Verify network availability: <code>sudo iwlist wlan0 scan | grep ESSID</code>. Check configuration in <code>/etc/wpa_supplicant/wpa_supplicant.conf</code>. Ensure credentials are correct. Restart networking: <code>sudo systemctl restart networking</code> MagicMirror application crashes, freezes, or shows blank screen System resource limitations or corrupted SD card Check resources with <code>top</code> and memory with <code>free -h</code>. Verify SD card: <code>sudo fsck -y /dev/mmcblk0p2</code>. Disable modules to reduce resource usage. Use PM2: <code>npm install -g pm2</code> and <code>pm2 start ~/MagicMirror/installers/pm2_MagicMirror.json</code>. Set automatic recovery: <code>pm2 startup</code> and <code>pm2 save</code> localhost is loading indefinitely The handler function is missing a response method Make sure the handler function includes a response method to end the HTTP request-response cycle. Add a method like <code>res.send()</code> or <code>res.json()</code> to your route handlers."},{"location":"oldversions/installationBL/","title":"Installation Guide","text":""},{"location":"oldversions/installationBL/#overview","title":"Overview","text":"<p>This section guides you through installing the MagicMirror\u00b2 software on your Raspberry Pi. MagicMirror\u00b2 is an open-source platform that transforms your mirror into a customizable display with various modules for different types of information.</p>"},{"location":"oldversions/installationBL/#preparing-your-raspberry-pi","title":"Preparing Your Raspberry Pi","text":""},{"location":"oldversions/installationBL/#update-your-system","title":"Update Your System","text":"<p>Before installing any new software, ensure your system is up to date:</p> <ol> <li>Open a terminal window</li> <li>Run the following commands:     <pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre></li> <li>Wait for the process to complete (may take several minutes)</li> </ol> <p>System Updates</p> <p>Keeping your system updated ensures compatibility with the latest software and improves security.</p>"},{"location":"oldversions/installationBL/#install-required-dependencies","title":"Install Required Dependencies","text":"<p>MagicMirror\u00b2 requires several dependencies to function properly:</p> <ol> <li> <p>Install Node.js and npm:    <pre><code>curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install -y nodejs\n</code></pre></p> </li> <li> <p>Verify the installation:    <pre><code>node -v\nnpm -v\n</code></pre></p> </li> <li> <p>Install other required packages:    <pre><code>sudo apt install -y git python3-pip\n</code></pre></p> </li> </ol>"},{"location":"oldversions/installationBL/#installing-magicmirror2","title":"Installing MagicMirror\u00b2","text":""},{"location":"oldversions/installationBL/#clone-the-repository","title":"Clone the Repository","text":"<ol> <li> <p>Navigate to your home directory:    <pre><code>cd ~\n</code></pre></p> </li> <li> <p>Clone the MagicMirror repository:    <pre><code>git clone https://github.com/MichMich/MagicMirror.git\n</code></pre></p> </li> <li> <p>Navigate to the MagicMirror directory:    <pre><code>cd MagicMirror\n</code></pre></p> </li> </ol>"},{"location":"oldversions/installationBL/#install-dependencies-and-run-setup","title":"Install Dependencies and Run Setup","text":"<ol> <li>Install the required npm packages:    <pre><code>npm install\n</code></pre></li> </ol> <p>Installation Time</p> <p>This process may take 10-15 minutes on a Raspberry Pi. Be patient and don't interrupt the process.</p> <ol> <li> <p>Copy the sample configuration:    <pre><code>cp config/config.js.sample config/config.js\n</code></pre></p> </li> <li> <p>Test the installation:    <pre><code>npm start\n</code></pre></p> </li> </ol> <p>If successful, you should see the MagicMirror interface appear on screen.</p> <ol> <li>Press <code>Ctrl+Q</code> to exit the application</li> </ol>"},{"location":"oldversions/installationBL/#conclusion","title":"Conclusion","text":"<p>You have now successfully installed MagicMirror\u00b2 on your Raspberry Pi and configured it to start automatically at boot. In the next section, we'll configure the basic modules and customize the display layout.</p>"}]}